{"version":3,"file":"index.mjs","sources":["../src/composables/useChatEngine.ts","../src/utils/markdown.ts","../src/components/AiChatWindow.vue","../src/components/AiChatToggle.vue","../src/index.ts"],"sourcesContent":["import { ref, reactive, toRefs, watch, onMounted, Ref } from 'vue';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AIClient, Message as CoreMessage, StreamCallbacks, AIProvider } from '@aivue/core';\n\n// Define types\nexport interface Message extends CoreMessage {\n  id?: string;\n  timestamp?: Date;\n}\n\nexport interface ChatOptions {\n  // Required options\n  provider: AIProvider;\n  apiKey?: string;\n  model?: string;\n\n  // Optional client configuration\n  client?: AIClient;\n  baseUrl?: string;\n  organizationId?: string;\n\n  // Chat behavior options\n  initialMessages?: Message[];\n  systemPrompt?: string;\n  streaming?: boolean;\n  persistenceKey?: string | null;\n  maxMessages?: number;\n\n  // Demo mode\n  demoMode?: boolean;\n  demoResponses?: Record<string, string>;\n\n  // Proxy options for security\n  useProxy?: boolean;\n  proxyUrl?: string;\n\n  // Callbacks\n  onError?: ((error: Error) => void) | null;\n  onMessageSent?: ((message: Message) => void) | null;\n  onResponseReceived?: ((message: Message) => void) | null;\n}\n\nexport interface ChatState {\n  messages: Message[];\n  isLoading: boolean;\n  error: Error | null;\n}\n\nexport interface ChatEngineReturn {\n  // Reactive refs\n  messages: Ref<Message[]>;\n  isLoading: Ref<boolean>;\n  error: Ref<Error | null>;\n\n  // Methods\n  sendMessage: (content: string) => Promise<void>;\n  clearMessages: () => void;\n  setMessages: (messages: Message[]) => void;\n  addMessage: (message: Message) => void;\n  resetError: () => void;\n  updateConfig: (config: Partial<ChatOptions>) => void;\n}\n\n/**\n * Composable for managing chat state and interactions with AI\n *\n * @param options - Configuration options\n * @returns Chat state and methods\n */\nexport function useChatEngine(options: ChatOptions): ChatEngineReturn {\n  // Create or use provided client\n  let client: AIClient;\n\n  if (options.client) {\n    client = options.client;\n  } else if (options.provider) {\n    // Create a new client if one wasn't provided\n    client = new AIClient({\n      provider: options.provider,\n      apiKey: options.apiKey,\n      model: options.model || getDefaultModelForProvider(options.provider),\n      baseUrl: options.baseUrl,\n      organizationId: options.organizationId\n    });\n  } else {\n    throw new Error('Either client or provider must be specified in options');\n  }\n\n  // Extract other options with defaults\n  const {\n    initialMessages = [],\n    systemPrompt = 'You are a helpful assistant.',\n    streaming = true,\n    persistenceKey = null,\n    maxMessages = 100,\n    demoMode = false,\n    demoResponses = {},\n    useProxy = false,\n    proxyUrl = '/api/chat',\n    onError = null,\n    onMessageSent = null,\n    onResponseReceived = null\n  } = options;\n\n  // Create reactive state using refs for better Vue 3 compatibility\n  const messages = ref<Message[]>([]);\n  const isLoading = ref<boolean>(false);\n  const error = ref<Error | null>(null);\n\n  // Initialize messages with timestamps and IDs\n  const initializeMessages = (msgs: Message[]): Message[] => {\n    return msgs.map(msg => ({\n      ...msg,\n      id: msg.id || uuidv4(),\n      timestamp: msg.timestamp || new Date()\n    }));\n  };\n\n  // Load messages from localStorage if persistenceKey is provided\n  onMounted(() => {\n    if (persistenceKey) {\n      try {\n        const savedMessages = localStorage.getItem(persistenceKey);\n        if (savedMessages) {\n          messages.value = initializeMessages(JSON.parse(savedMessages));\n          return;\n        }\n      } catch (err) {\n        console.error('Error loading chat history:', err);\n      }\n    }\n\n    // If no saved messages or error loading, use initialMessages\n    messages.value = initializeMessages(initialMessages);\n  });\n\n  // Save messages to localStorage when they change\n  const saveMessagesToLocalStorage = () => {\n    if (persistenceKey) {\n      try {\n        localStorage.setItem(persistenceKey, JSON.stringify(messages.value));\n      } catch (err) {\n        console.error('Error saving chat history:', err);\n      }\n    }\n  };\n\n  // Watch for changes to save to localStorage\n  watch(messages, () => {\n    saveMessagesToLocalStorage();\n  }, { deep: true });\n\n  /**\n   * Reset error state\n   */\n  const resetError = (): void => {\n    error.value = null;\n  };\n\n  /**\n   * Update configuration options\n   *\n   * @param config - New configuration options\n   */\n  const updateConfig = (config: Partial<ChatOptions>): void => {\n    // Update client configuration if needed\n    if (config.provider || config.apiKey || config.model || config.baseUrl || config.organizationId) {\n      client = new AIClient({\n        provider: config.provider || options.provider,\n        apiKey: config.apiKey || options.apiKey,\n        model: config.model || options.model || getDefaultModelForProvider(config.provider || options.provider),\n        baseUrl: config.baseUrl || options.baseUrl,\n        organizationId: config.organizationId || options.organizationId\n      });\n    }\n\n    // Update other options\n    Object.assign(options, config);\n  };\n\n  /**\n   * Send a user message and get AI response\n   *\n   * @param content - Message content\n   * @returns Promise that resolves when the message is sent and response is received\n   */\n  const sendMessage = async (content: string): Promise<void> => {\n    if (!content.trim()) return;\n\n    // Reset error state\n    error.value = null;\n\n    // Add user message\n    const userMessage: Message = {\n      role: 'user',\n      content,\n      id: uuidv4(),\n      timestamp: new Date()\n    };\n    messages.value.push(userMessage);\n\n    // Call onMessageSent callback if provided\n    if (onMessageSent) {\n      onMessageSent(userMessage);\n    }\n\n    // Start loading\n    isLoading.value = true;\n\n    try {\n      // Prepare messages for the AI\n      const messagesToSend: CoreMessage[] = [\n        { role: 'system', content: systemPrompt },\n        ...messages.value.filter(msg => msg.role === 'user' || msg.role === 'assistant')\n          .map(({ role, content }) => ({ role, content }))\n      ];\n\n      // Check if we're in demo mode\n      if (demoMode) {\n        // Generate a demo response\n        let demoResponse = \"I'm a demo AI assistant. This is a simulated response.\";\n\n        // Check if we have a matching demo response\n        const userMessageLower = userMessage.content.toLowerCase();\n        for (const [key, response] of Object.entries(demoResponses)) {\n          if (userMessageLower.includes(key.toLowerCase())) {\n            demoResponse = response;\n            break;\n          }\n        }\n\n        if (streaming) {\n          // Simulate streaming for demo mode\n          const assistantMessage: Message = {\n            role: 'assistant',\n            content: '',\n            id: uuidv4(),\n            timestamp: new Date()\n          };\n          messages.value.push(assistantMessage);\n\n          let streamedContent = '';\n          const streamResponse = async () => {\n            for (const char of demoResponse) {\n              await new Promise(resolve => setTimeout(resolve, 20));\n              streamedContent += char;\n              assistantMessage.content = streamedContent;\n            }\n            isLoading.value = false;\n            if (onResponseReceived) {\n              onResponseReceived(assistantMessage);\n            }\n            if (persistenceKey) {\n              saveMessagesToLocalStorage();\n            }\n          };\n\n          streamResponse();\n          return;\n        } else {\n          // Non-streaming demo mode\n          const assistantMessage: Message = {\n            role: 'assistant',\n            content: demoResponse,\n            id: uuidv4(),\n            timestamp: new Date()\n          };\n          messages.value.push(assistantMessage);\n          isLoading.value = false;\n          if (onResponseReceived) {\n            onResponseReceived(assistantMessage);\n          }\n          if (persistenceKey) {\n            saveMessagesToLocalStorage();\n          }\n          return;\n        }\n      }\n\n      if (streaming) {\n        // For streaming responses\n        let responseContent = '';\n\n        // Add placeholder for assistant message\n        const assistantMessage: Message = {\n          role: 'assistant',\n          content: '',\n          id: uuidv4(),\n          timestamp: new Date()\n        };\n        messages.value.push(assistantMessage);\n\n        const callbacks: StreamCallbacks = {\n          onStart: () => {\n            // Message already added above\n            console.log('Stream started');\n          },\n          onToken: (token: string) => {\n            // Update the last message with the new token\n            responseContent += token;\n            const lastMessage = messages.value[messages.value.length - 1];\n            if (lastMessage && lastMessage.role === 'assistant') {\n              lastMessage.content = responseContent;\n            }\n          },\n          onComplete: (completeText: string) => {\n            isLoading.value = false;\n            console.log('Stream completed');\n\n            // Call onResponseReceived callback if provided\n            if (onResponseReceived) {\n              const lastMessage = messages.value[messages.value.length - 1];\n              if (lastMessage && lastMessage.role === 'assistant') {\n                onResponseReceived(lastMessage);\n              }\n            }\n\n            // Save to localStorage if persistenceKey is provided\n            if (persistenceKey) {\n              saveMessagesToLocalStorage();\n            }\n          },\n          onError: (err: Error) => {\n            console.error('Stream error:', err);\n            error.value = err;\n            isLoading.value = false;\n            if (onError) onError(err);\n          }\n        };\n\n        if (useProxy) {\n          // Implement proxy handling here\n          // This would typically involve making a fetch request to the proxy URL\n          // with the messages and streaming the response\n          try {\n            const response = await fetch(proxyUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                messages: messagesToSend,\n                model: options.model,\n                stream: true\n              })\n            });\n\n            if (!response.ok) {\n              throw new Error(`Proxy request failed with status ${response.status}`);\n            }\n\n            if (response.body) {\n              const reader = response.body.getReader();\n              const decoder = new TextDecoder();\n\n              callbacks.onStart?.();\n\n              while (true) {\n                const { done, value } = await reader.read();\n                if (done) break;\n\n                const chunk = decoder.decode(value, { stream: true });\n                callbacks.onToken?.(chunk);\n              }\n\n              callbacks.onComplete?.(responseContent);\n            }\n          } catch (err: any) {\n            callbacks.onError?.(err);\n          }\n        } else {\n          // Use the client directly\n          await client.chatStream(messagesToSend, callbacks);\n        }\n      } else {\n        // For non-streaming responses\n        let response: string;\n\n        if (useProxy) {\n          // Use proxy for non-streaming requests\n          try {\n            const proxyResponse = await fetch(proxyUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                messages: messagesToSend,\n                model: options.model,\n                stream: false\n              })\n            });\n\n            if (!proxyResponse.ok) {\n              throw new Error(`Proxy request failed with status ${proxyResponse.status}`);\n            }\n\n            const data = await proxyResponse.json();\n            response = data.content || data.message || data.response || '';\n          } catch (err: any) {\n            throw new Error(`Proxy request failed: ${err.message}`);\n          }\n        } else {\n          // Use the client directly\n          response = await client.chat(messagesToSend);\n        }\n\n        // Add assistant message\n        const assistantMessage: Message = {\n          role: 'assistant',\n          content: response,\n          id: uuidv4(),\n          timestamp: new Date()\n        };\n        messages.value.push(assistantMessage);\n\n        // Call onResponseReceived callback if provided\n        if (onResponseReceived) {\n          onResponseReceived(assistantMessage);\n        }\n\n        isLoading.value = false;\n      }\n\n      // Limit the number of messages\n      if (messages.value.length > maxMessages) {\n        // Keep system message and the last maxMessages messages\n        const systemMessages = messages.value.filter(msg => msg.role === 'system');\n        const recentMessages = messages.value.slice(-maxMessages);\n        messages.value = [...systemMessages, ...recentMessages];\n      }\n    } catch (err: any) {\n      error.value = new Error(`Failed to send message: ${err.message}`);\n      isLoading.value = false;\n      if (onError) onError(error.value);\n    }\n  };\n\n  /**\n   * Clear all messages\n   */\n  const clearMessages = (): void => {\n    messages.value = [];\n    error.value = null;\n  };\n\n  /**\n   * Set messages array\n   *\n   * @param newMessages - New messages array\n   */\n  const setMessages = (newMessages: Message[]): void => {\n    messages.value = initializeMessages(newMessages);\n  };\n\n  /**\n   * Add a single message\n   *\n   * @param message - Message to add\n   */\n  const addMessage = (message: Message): void => {\n    messages.value.push({\n      ...message,\n      id: message.id || uuidv4(),\n      timestamp: message.timestamp || new Date()\n    });\n  };\n\n  return {\n    messages,\n    isLoading,\n    error,\n    sendMessage,\n    clearMessages,\n    setMessages,\n    addMessage,\n    resetError,\n    updateConfig\n  };\n}\n\n/**\n * Helper function to get default model for a provider\n */\nfunction getDefaultModelForProvider(provider: AIProvider): string {\n  switch (provider) {\n    case 'openai':\n      return 'gpt-3.5-turbo';\n    case 'claude':\n      return 'claude-3-sonnet-20240229';\n    case 'gemini':\n      return 'gemini-pro';\n    case 'huggingface':\n      return 'mistralai/Mistral-7B-Instruct-v0.2';\n    case 'ollama':\n      return 'llama2';\n    case 'deepseek':\n      return 'deepseek-chat';\n    default:\n      return 'gpt-3.5-turbo';\n  }\n}\n\nexport default useChatEngine;\n","import MarkdownIt from 'markdown-it';\n\n// Initialize markdown-it with options\nconst md = new MarkdownIt({\n  html: false,        // Disable HTML tags in source\n  xhtmlOut: false,    // Use '/' to close single tags (<br />)\n  breaks: true,       // Convert '\\n' in paragraphs into <br>\n  linkify: true,      // Autoconvert URL-like text to links\n  typographer: true,  // Enable smartquotes and other typographic replacements\n  highlight: function (str: string, lang: string) {\n    // You could add syntax highlighting here if needed\n    return `<pre class=\"language-${lang}\"><code>${str}</code></pre>`;\n  }\n});\n\n/**\n * Format markdown text to HTML\n * \n * @param text - Markdown text to format\n * @returns HTML formatted text\n */\nexport function formatMarkdown(text: string): string {\n  if (!text) return '';\n  return md.render(text);\n}\n\nexport default {\n  formatMarkdown\n};\n","<template>\n  <div class=\"ai-chat-window\" :class=\"{ 'ai-chat-window--dark': theme === 'dark' }\">\n    <div class=\"ai-chat-window__header\">\n      <slot name=\"header\">\n        <h3 class=\"ai-chat-window__title\">{{ title }}</h3>\n      </slot>\n    </div>\n\n    <div class=\"ai-chat-window__messages\" ref=\"messagesContainer\">\n      <template v-for=\"(message, index) in messages\" :key=\"message.id || index\">\n        <slot\n          v-if=\"message.role === 'user'\"\n          name=\"user-message\"\n          :message=\"message\"\n          :index=\"index\"\n        >\n          <div class=\"ai-chat-window__message ai-chat-window__message--user\">\n            <div v-if=\"showAvatars\" class=\"ai-chat-window__avatar ai-chat-window__avatar--user\">\n              <img v-if=\"userAvatar\" :src=\"userAvatar\" alt=\"User\" />\n              <div v-else class=\"ai-chat-window__avatar-placeholder\">U</div>\n            </div>\n            <div class=\"ai-chat-window__message-content\">\n              <div class=\"ai-chat-window__message-text\">{{ message.content }}</div>\n              <div v-if=\"showTimestamps && message.timestamp\" class=\"ai-chat-window__message-timestamp\">\n                {{ formatTimestamp(message.timestamp) }}\n              </div>\n            </div>\n          </div>\n        </slot>\n\n        <slot\n          v-else-if=\"message.role === 'assistant'\"\n          name=\"assistant-message\"\n          :message=\"message\"\n          :index=\"index\"\n        >\n          <div class=\"ai-chat-window__message ai-chat-window__message--assistant\">\n            <div v-if=\"showAvatars\" class=\"ai-chat-window__avatar ai-chat-window__avatar--assistant\">\n              <img v-if=\"assistantAvatar\" :src=\"assistantAvatar\" alt=\"Assistant\" />\n              <div v-else class=\"ai-chat-window__avatar-placeholder\">A</div>\n            </div>\n            <div class=\"ai-chat-window__message-content\">\n              <div class=\"ai-chat-window__message-text\" v-html=\"formatMessage(message.content)\"></div>\n              <div v-if=\"showTimestamps && message.timestamp\" class=\"ai-chat-window__message-timestamp\">\n                {{ formatTimestamp(message.timestamp) }}\n              </div>\n              <button\n                v-if=\"showCopyButton\"\n                class=\"ai-chat-window__copy-button\"\n                @click=\"copyToClipboard(message.content)\"\n              >\n                Copy\n              </button>\n            </div>\n          </div>\n        </slot>\n\n        <slot\n          v-else\n          name=\"message\"\n          :message=\"message\"\n          :index=\"index\"\n        >\n          <div class=\"ai-chat-window__message\">\n            <div class=\"ai-chat-window__message-role\">{{ message.role }}</div>\n            <div class=\"ai-chat-window__message-content\">\n              <div class=\"ai-chat-window__message-text\">{{ message.content }}</div>\n            </div>\n          </div>\n        </slot>\n      </template>\n\n      <div v-if=\"isLoading\" class=\"ai-chat-window__loading\">\n        <slot name=\"loading\">\n          <div class=\"ai-chat-window__loading-text\">{{ loadingText }}</div>\n        </slot>\n      </div>\n\n      <div v-if=\"error\" class=\"ai-chat-window__error\">\n        <slot name=\"error\" :error=\"error\">\n          <div class=\"ai-chat-window__error-text\">{{ errorText }}</div>\n        </slot>\n      </div>\n    </div>\n\n    <div class=\"ai-chat-window__input-container\">\n      <slot name=\"input\" :input=\"userInput\" :send-message=\"handleSendMessage\">\n        <div class=\"ai-chat-window__input-wrapper\">\n          <textarea\n            v-model=\"userInput\"\n            class=\"ai-chat-window__input\"\n            :placeholder=\"placeholder\"\n            :disabled=\"isLoading\"\n            @keydown.enter.prevent=\"handleKeyDown\"\n            ref=\"inputElement\"\n          ></textarea>\n          <button\n            class=\"ai-chat-window__send-button\"\n            @click=\"handleSendMessage\"\n            :disabled=\"isLoading || !userInput.trim()\"\n          >\n            Send\n          </button>\n        </div>\n      </slot>\n    </div>\n\n    <div class=\"ai-chat-window__footer\">\n      <slot name=\"footer\">\n        <button\n          v-if=\"messages.length > 0\"\n          class=\"ai-chat-window__clear-button\"\n          @click=\"clearMessages\"\n        >\n          Clear Chat\n        </button>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, nextTick, onMounted, PropType } from 'vue';\nimport { AIClient, AIProvider } from '@aivue/core';\nimport { useChatEngine, Message } from '../composables/useChatEngine';\nimport { formatMarkdown } from '../utils/markdown';\n\n// Define props with TypeScript\nconst props = defineProps({\n  // Provider configuration (either client or provider is required)\n  client: {\n    type: Object as PropType<AIClient>,\n    default: null\n  },\n  provider: {\n    type: String as PropType<AIProvider>,\n    default: null\n  },\n  apiKey: {\n    type: String,\n    default: null\n  },\n  model: {\n    type: String,\n    default: null\n  },\n  baseUrl: {\n    type: String,\n    default: null\n  },\n  organizationId: {\n    type: String,\n    default: null\n  },\n\n  // API security options\n  useProxy: {\n    type: Boolean,\n    default: false\n  },\n  proxyUrl: {\n    type: String,\n    default: '/api/chat'\n  },\n\n  // Demo mode\n  demoMode: {\n    type: Boolean,\n    default: false\n  },\n  demoResponses: {\n    type: Object as PropType<Record<string, string>>,\n    default: () => ({\n      'hello': 'Hello! I\\'m a demo AI assistant. How can I help you today?',\n      'help': 'I can help you with various tasks. Just ask me a question!',\n      'features': 'This chatbot component supports markdown, code highlighting, streaming responses, and more!'\n    })\n  },\n\n  // Chat configuration\n  title: {\n    type: String,\n    default: 'Chat'\n  },\n  placeholder: {\n    type: String,\n    default: 'Type a message...'\n  },\n  initialMessages: {\n    type: Array as PropType<Message[]>,\n    default: () => []\n  },\n  systemPrompt: {\n    type: String,\n    default: 'You are a helpful assistant.'\n  },\n  streaming: {\n    type: Boolean,\n    default: true\n  },\n  loadingText: {\n    type: String,\n    default: 'Thinking...'\n  },\n  errorText: {\n    type: String,\n    default: 'An error occurred. Please try again.'\n  },\n\n  // UI configuration\n  showTimestamps: {\n    type: Boolean,\n    default: false\n  },\n  showCopyButton: {\n    type: Boolean,\n    default: true\n  },\n  showAvatars: {\n    type: Boolean,\n    default: true\n  },\n  userAvatar: {\n    type: String,\n    default: null\n  },\n  assistantAvatar: {\n    type: String,\n    default: null\n  },\n  theme: {\n    type: String as PropType<'light' | 'dark'>,\n    default: 'light',\n    validator: (value: string) => ['light', 'dark'].includes(value)\n  },\n  height: {\n    type: String,\n    default: '500px'\n  },\n  width: {\n    type: String,\n    default: '100%'\n  },\n  maxWidth: {\n    type: String,\n    default: '800px'\n  },\n  persistenceKey: {\n    type: String,\n    default: null\n  }\n});\n\n// Define emits\nconst emit = defineEmits(['message-sent', 'response-received', 'error']);\n\n// Local state\nconst userInput = ref('');\nconst messagesContainer = ref<HTMLElement | null>(null);\nconst inputElement = ref<HTMLTextAreaElement | null>(null);\n\n// Validate that either client or provider is provided\nif (!props.client && !props.provider) {\n  console.error('Either client or provider must be specified in AiChatWindow props');\n}\n\n// Configure chat options\nconst chatOptions = computed(() => ({\n  // Provider configuration\n  client: props.client,\n  provider: props.provider as AIProvider,\n  apiKey: props.apiKey,\n  model: props.model,\n  baseUrl: props.baseUrl,\n  organizationId: props.organizationId,\n\n  // API security\n  useProxy: props.useProxy,\n  proxyUrl: props.proxyUrl,\n\n  // Chat behavior\n  systemPrompt: props.systemPrompt,\n  initialMessages: props.initialMessages,\n  streaming: props.streaming,\n  persistenceKey: props.persistenceKey,\n  demoMode: props.demoMode,\n  demoResponses: props.demoResponses,\n\n  // Callbacks\n  onError: (error: Error) => {\n    emit('error', { error });\n  },\n  onMessageSent: (message: Message) => {\n    emit('message-sent', { message });\n  },\n  onResponseReceived: (message: Message) => {\n    emit('response-received', { message });\n  }\n}));\n\n// Initialize chat engine\nconst {\n  messages,\n  isLoading,\n  error,\n  sendMessage,\n  clearMessages\n} = useChatEngine(chatOptions.value);\n\n// Handle sending messages\nconst handleSendMessage = async () => {\n  if (!userInput.value.trim() || isLoading.value) return;\n\n  const message = userInput.value;\n  userInput.value = '';\n\n  try {\n    await sendMessage(message);\n  } catch (err) {\n    // Error is already handled by the onError callback\n  }\n};\n\n// Handle keyboard events\nconst handleKeyDown = (event: KeyboardEvent) => {\n  if (event.key === 'Enter' && !event.shiftKey) {\n    event.preventDefault();\n    handleSendMessage();\n  }\n};\n\n// Format message content with markdown\nconst formatMessage = (content: string): string => {\n  return formatMarkdown(content);\n};\n\n// Format timestamp for display\nconst formatTimestamp = (timestamp?: Date): string => {\n  if (!timestamp) return '';\n  const date = new Date(timestamp);\n  return date.toLocaleTimeString();\n};\n\n// Copy message content to clipboard\nconst copyToClipboard = (text: string): void => {\n  navigator.clipboard.writeText(text)\n    .then(() => {\n      // Could show a toast notification here\n      console.log('Copied to clipboard');\n    })\n    .catch(err => {\n      console.error('Failed to copy text: ', err);\n    });\n};\n\n// Auto-scroll to bottom when new messages arrive\nwatch(messages, () => {\n  nextTick(() => {\n    if (messagesContainer.value) {\n      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n    }\n  });\n}, { deep: true });\n\n// Focus input on mount\nonMounted(() => {\n  if (inputElement.value) {\n    inputElement.value.focus();\n  }\n});\n</script>\n\n<style>\n.ai-chat-window {\n  display: flex;\n  flex-direction: column;\n  border: 1px solid var(--aivue-chat-border, #e0e0e0);\n  border-radius: var(--aivue-chat-border-radius, 8px);\n  background-color: var(--aivue-chat-bg, #ffffff);\n  color: var(--aivue-chat-text, #333333);\n  font-family: var(--aivue-chat-font-family, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);\n  height: 500px;\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n  overflow: hidden;\n}\n\n.ai-chat-window--dark {\n  --aivue-chat-bg: #1e1e1e;\n  --aivue-chat-border: #444444;\n  --aivue-chat-text: #f0f0f0;\n  --aivue-chat-user-bg: #2b5278;\n  --aivue-chat-assistant-bg: #383838;\n  --aivue-chat-input-bg: #2d2d2d;\n  --aivue-chat-input-border: #555555;\n  --aivue-chat-button-bg: #4a6da7;\n  --aivue-chat-button-text: #ffffff;\n}\n\n.ai-chat-window__header {\n  padding: 12px 16px;\n  border-bottom: 1px solid var(--aivue-chat-border, #e0e0e0);\n}\n\n.ai-chat-window__title {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.ai-chat-window__messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n}\n\n.ai-chat-window__message {\n  display: flex;\n  margin-bottom: 16px;\n}\n\n.ai-chat-window__message--user {\n  justify-content: flex-end;\n}\n\n.ai-chat-window__avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  overflow: hidden;\n  margin-right: 8px;\n}\n\n.ai-chat-window__message--user .ai-chat-window__avatar {\n  margin-right: 0;\n  margin-left: 8px;\n  order: 2;\n}\n\n.ai-chat-window__avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.ai-chat-window__avatar-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #e0e0e0;\n  color: #666666;\n  font-weight: bold;\n}\n\n.ai-chat-window__message-content {\n  max-width: 70%;\n  padding: 10px 14px;\n  border-radius: 12px;\n  position: relative;\n}\n\n.ai-chat-window__message--user .ai-chat-window__message-content {\n  background-color: var(--aivue-chat-user-bg, #e1f5fe);\n}\n\n.ai-chat-window__message--assistant .ai-chat-window__message-content {\n  background-color: var(--aivue-chat-assistant-bg, #f5f5f5);\n}\n\n.ai-chat-window__message-text {\n  word-break: break-word;\n}\n\n.ai-chat-window__message-timestamp {\n  font-size: 10px;\n  color: #999;\n  margin-top: 4px;\n  text-align: right;\n}\n\n.ai-chat-window__copy-button {\n  position: absolute;\n  right: 8px;\n  bottom: 8px;\n  background: transparent;\n  border: none;\n  color: #999;\n  font-size: 12px;\n  cursor: pointer;\n  opacity: 0;\n  transition: opacity 0.2s;\n}\n\n.ai-chat-window__message-content:hover .ai-chat-window__copy-button {\n  opacity: 1;\n}\n\n.ai-chat-window__loading {\n  display: flex;\n  justify-content: center;\n  margin: 16px 0;\n}\n\n.ai-chat-window__loading-text {\n  color: var(--aivue-chat-loading, #9e9e9e);\n  font-style: italic;\n}\n\n.ai-chat-window__error {\n  color: var(--aivue-chat-error, #f44336);\n  margin: 16px 0;\n  text-align: center;\n}\n\n.ai-chat-window__input-container {\n  padding: 12px 16px;\n  border-top: 1px solid var(--aivue-chat-border, #e0e0e0);\n}\n\n.ai-chat-window__input-wrapper {\n  display: flex;\n  position: relative;\n}\n\n.ai-chat-window__input {\n  flex: 1;\n  padding: 10px 14px;\n  border: 1px solid var(--aivue-chat-input-border, #e0e0e0);\n  border-radius: 20px;\n  resize: none;\n  min-height: 40px;\n  max-height: 120px;\n  background-color: var(--aivue-chat-input-bg, #ffffff);\n  color: var(--aivue-chat-text, #333333);\n  font-family: inherit;\n  font-size: 14px;\n}\n\n.ai-chat-window__input:focus {\n  outline: none;\n  border-color: var(--aivue-chat-button-bg, #2196f3);\n}\n\n.ai-chat-window__send-button {\n  position: absolute;\n  right: 8px;\n  bottom: 8px;\n  background-color: var(--aivue-chat-button-bg, #2196f3);\n  color: var(--aivue-chat-button-text, #ffffff);\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.ai-chat-window__send-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.ai-chat-window__footer {\n  padding: 8px 16px;\n  display: flex;\n  justify-content: center;\n}\n\n.ai-chat-window__clear-button {\n  background: transparent;\n  border: none;\n  color: #999;\n  cursor: pointer;\n  font-size: 12px;\n  text-decoration: underline;\n}\n</style>\n","<template>\n  <div class=\"ai-chat-toggle\" :class=\"{ 'ai-chat-toggle--open': isOpen, 'ai-chat-toggle--bottom': position === 'bottom', 'ai-chat-toggle--top': position === 'top' }\">\n    <!-- Toggle Button -->\n    <button\n      class=\"ai-chat-toggle__button\"\n      @click=\"toggleChat\"\n      :aria-label=\"isOpen ? 'Close chat' : 'Open chat'\"\n      :title=\"isOpen ? 'Close chat' : 'Open chat'\"\n    >\n      <span v-if=\"!isOpen\" class=\"ai-chat-toggle__icon ai-chat-toggle__icon--open\">\n        <slot name=\"toggle-icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\n          </svg>\n        </slot>\n      </span>\n      <span v-else class=\"ai-chat-toggle__icon ai-chat-toggle__icon--close\">\n        <slot name=\"close-icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n          </svg>\n        </slot>\n      </span>\n    </button>\n\n    <!-- Chat Window Container -->\n    <div v-show=\"isOpen\" class=\"ai-chat-toggle__window\">\n      <div class=\"ai-chat-toggle__header\" v-if=\"title\">\n        <h3 class=\"ai-chat-toggle__title\">{{ title }}</h3>\n        <button\n          class=\"ai-chat-toggle__close\"\n          @click=\"toggleChat\"\n          aria-label=\"Close chat\"\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n          </svg>\n        </button>\n      </div>\n\n      <!-- Actual Chat Window Component -->\n      <div class=\"ai-chat-toggle__content\">\n        <AiChatWindow\n          v-if=\"useDefaultChat\"\n          v-bind=\"chatProps\"\n          @message-sent=\"$emit('message-sent', $event)\"\n          @response-received=\"$emit('response-received', $event)\"\n          @error=\"$emit('error', $event)\"\n        />\n        <slot v-else></slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, computed, PropType, watch } from 'vue';\nimport { AIClient, AIProvider } from '@aivue/core';\nimport AiChatWindow from './AiChatWindow.vue';\nimport { Message } from '../composables/useChatEngine';\n\nexport default defineComponent({\n  name: 'AiChatToggle',\n  components: {\n    AiChatWindow\n  },\n  props: {\n    // Toggle behavior\n    position: {\n      type: String as PropType<'bottom' | 'top'>,\n      default: 'bottom',\n      validator: (value: string) => ['bottom', 'top'].includes(value)\n    },\n    defaultOpen: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: 'Chat with AI'\n    },\n\n    // Provider configuration (either client or provider is required)\n    client: {\n      type: Object as PropType<AIClient>,\n      default: null\n    },\n    provider: {\n      type: String as PropType<AIProvider>,\n      default: null\n    },\n    apiKey: {\n      type: String,\n      default: null\n    },\n    model: {\n      type: String,\n      default: null\n    },\n\n    // Pass all AiChatWindow props\n    placeholder: {\n      type: String,\n      default: 'Type a message...'\n    },\n    initialMessages: {\n      type: Array as PropType<Message[]>,\n      default: () => []\n    },\n    systemPrompt: {\n      type: String,\n      default: 'You are a helpful assistant.'\n    },\n    streaming: {\n      type: Boolean,\n      default: true\n    },\n    theme: {\n      type: String as PropType<'light' | 'dark'>,\n      default: 'light'\n    },\n    showAvatars: {\n      type: Boolean,\n      default: true\n    },\n    persistenceKey: {\n      type: String,\n      default: null\n    },\n\n    // Demo mode\n    demoMode: {\n      type: Boolean,\n      default: false\n    },\n    demoResponses: {\n      type: Object as PropType<Record<string, string>>,\n      default: () => ({\n        'hello': 'Hello! I\\'m a demo AI assistant. How can I help you today?',\n        'help': 'I can help you with various tasks. Just ask me a question!',\n        'features': 'This chatbot component supports markdown, code highlighting, streaming responses, and more!'\n      })\n    }\n  },\n  emits: ['toggle', 'message-sent', 'response-received', 'error'],\n  setup(props, { emit, slots }) {\n    const isOpen = ref(props.defaultOpen);\n\n    // Check if we should use the default chat window or a custom one via slot\n    const useDefaultChat = computed(() => !slots.default);\n\n    // Prepare props to pass to AiChatWindow\n    const chatProps = computed(() => {\n      const result: Record<string, any> = {\n        placeholder: props.placeholder,\n        initialMessages: props.initialMessages,\n        systemPrompt: props.systemPrompt,\n        streaming: props.streaming,\n        theme: props.theme,\n        showAvatars: props.showAvatars,\n        persistenceKey: props.persistenceKey,\n        demoMode: props.demoMode,\n        demoResponses: props.demoResponses\n      };\n\n      // Add provider configuration\n      if (props.client) {\n        result.client = props.client;\n      } else if (props.provider) {\n        result.provider = props.provider;\n        if (props.apiKey) result.apiKey = props.apiKey;\n        if (props.model) result.model = props.model;\n      }\n\n      return result;\n    });\n\n    // Toggle chat window\n    const toggleChat = () => {\n      isOpen.value = !isOpen.value;\n      emit('toggle', isOpen.value);\n    };\n\n    // Watch for changes to defaultOpen prop\n    watch(() => props.defaultOpen, (newValue) => {\n      isOpen.value = newValue;\n    });\n\n    return {\n      isOpen,\n      toggleChat,\n      useDefaultChat,\n      chatProps\n    };\n  }\n});\n</script>\n\n<style>\n.ai-chat-toggle {\n  position: fixed;\n  z-index: 9999;\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n.ai-chat-toggle--bottom {\n  right: 20px;\n  bottom: 20px;\n}\n\n.ai-chat-toggle--top {\n  right: 20px;\n  top: 20px;\n}\n\n.ai-chat-toggle__button {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background-color: #2563eb;\n  color: white;\n  border: none;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.3s ease, background-color 0.3s ease;\n}\n\n.ai-chat-toggle__button:hover {\n  transform: scale(1.05);\n  background-color: #1d4ed8;\n}\n\n.ai-chat-toggle__icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.ai-chat-toggle__window {\n  position: absolute;\n  bottom: 80px;\n  right: 0;\n  width: 350px;\n  height: 500px;\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.ai-chat-toggle--top .ai-chat-toggle__window {\n  bottom: auto;\n  top: 80px;\n}\n\n.ai-chat-toggle__header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 16px;\n  background-color: #f8fafc;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.ai-chat-toggle__title {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.ai-chat-toggle__close {\n  background: none;\n  border: none;\n  cursor: pointer;\n  color: #64748b;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 4px;\n  border-radius: 4px;\n}\n\n.ai-chat-toggle__close:hover {\n  background-color: #e2e8f0;\n}\n\n.ai-chat-toggle__content {\n  flex: 1;\n  overflow: hidden;\n}\n\n/* Dark theme */\n.ai-chat-toggle[data-theme=\"dark\"] .ai-chat-toggle__button {\n  background-color: #3b82f6;\n}\n\n.ai-chat-toggle[data-theme=\"dark\"] .ai-chat-toggle__button:hover {\n  background-color: #2563eb;\n}\n\n.ai-chat-toggle[data-theme=\"dark\"] .ai-chat-toggle__window {\n  background-color: #1e293b;\n}\n\n.ai-chat-toggle[data-theme=\"dark\"] .ai-chat-toggle__header {\n  background-color: #0f172a;\n  border-bottom-color: #334155;\n}\n\n.ai-chat-toggle[data-theme=\"dark\"] .ai-chat-toggle__title {\n  color: #f8fafc;\n}\n\n.ai-chat-toggle[data-theme=\"dark\"] .ai-chat-toggle__close {\n  color: #94a3b8;\n}\n\n.ai-chat-toggle[data-theme=\"dark\"] .ai-chat-toggle__close:hover {\n  background-color: #334155;\n}\n</style>\n","// AI-powered chat components for Vue.js\nimport { App } from 'vue';\nimport { AIClient } from '@aivue/core';\nimport AiChatWindowComponent from './components/AiChatWindow.vue';\nimport AiChatToggleComponent from './components/AiChatToggle.vue';\nimport { useChatEngine as useChatEngineComposable, Message, ChatOptions, ChatState } from './composables/useChatEngine';\nimport { formatMarkdown } from './utils/markdown';\n\n// Import Vue compatibility utilities from core\nconst {\n  createCompatComponent,\n  registerCompatComponent,\n  createCompatPlugin\n} = require('@aivue/core');\n\n// Re-export types\nexport type { Message, ChatOptions, ChatState };\n\n// Export components with compatibility layer\nexport const AiChatWindow = createCompatComponent(AiChatWindowComponent);\nexport const AiChatToggle = createCompatComponent(AiChatToggleComponent);\n\n// Export composables\nexport const useChatEngine = useChatEngineComposable;\n\n// Export utilities\nexport const utils = {\n  formatMarkdown\n};\n\n// Vue Plugin with compatibility layer\nexport const AiChatPlugin = createCompatPlugin({\n  install(app: App) {\n    // Register components globally using the compatibility helper\n    registerCompatComponent(app, 'AiChatWindow', AiChatWindowComponent);\n    registerCompatComponent(app, 'AiChatToggle', AiChatToggleComponent);\n  }\n});\n\n// No need to re-export Vue compatibility utilities\n\n// Default export\nexport default {\n  AiChatWindow,\n  AiChatToggle,\n  useChatEngine,\n  utils,\n  AiChatPlugin\n};\n"],"names":["useChatEngine","options","client","AIClient","getDefaultModelForProvider","initialMessages","systemPrompt","streaming","persistenceKey","maxMessages","demoMode","demoResponses","useProxy","proxyUrl","onError","onMessageSent","onResponseReceived","messages","ref","isLoading","error","initializeMessages","msgs","msg","uuidv4","onMounted","savedMessages","err","saveMessagesToLocalStorage","watch","content","userMessage","messagesToSend","role","demoResponse","userMessageLower","key","response","assistantMessage","streamedContent","char","resolve","responseContent","callbacks","token","lastMessage","completeText","reader","decoder","_a","done","value","chunk","_b","_c","_d","proxyResponse","data","systemMessages","recentMessages","newMessages","message","config","provider","md","MarkdownIt","str","lang","formatMarkdown","text","props","__props","emit","__emit","userInput","messagesContainer","inputElement","chatOptions","computed","sendMessage","clearMessages","handleSendMessage","handleKeyDown","event","formatMessage","formatTimestamp","timestamp","copyToClipboard","nextTick","_sfc_main","defineComponent","AiChatWindow","slots","isOpen","useDefaultChat","chatProps","result","toggleChat","newValue","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_resolveComponent","_normalizeClass","_ctx","_createElementVNode","_cache","args","_renderSlot","_openBlock","_createElementBlock","title","_withDirectives","_hoisted_6","_toDisplayString","_hoisted_7","_createBlock","_component_AiChatWindow","$emit","$event","createCompatComponent","registerCompatComponent","createCompatPlugin","AiChatWindowComponent","AiChatToggle","AiChatToggleComponent","useChatEngineComposable","utils","AiChatPlugin","app","index"],"mappings":"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"}